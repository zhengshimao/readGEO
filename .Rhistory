library(devtools)
library(usethis)
use_package("GEOquery")
read_matrix <- function(f_matrx){
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
# exp_ori <- eSet@assayData$exprs
exp_ori0 <- GEOquery::exprs(eSet)
pd <- pData(eSet)
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
return(list(exp = exp_ori, clinical_info = pd, eSet))
}
test <- read_matrix("./GSE106172/matrix/GSE106172_series_matrix.txt.gz")
read_matrix <- function(f_matrix){
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
# exp_ori <- eSet@assayData$exprs
exp_ori0 <- GEOquery::exprs(eSet)
pd <- pData(eSet)
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
return(list(exp = exp_ori, clinical_info = pd, eSet))
}
test <- read_matrix("./GSE106172/matrix/GSE106172_series_matrix.txt.gz")
read_matrix <- function(f_matrix){
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
# exp_ori <- eSet@assayData$exprs
exp_ori0 <- GEOquery::exprs(eSet)
pd <- GEOquery::pData(eSet)
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
return(list(exp = exp_ori, clinical_info = pd, eSet))
}
test <- read_matrix("./GSE106172/matrix/GSE106172_series_matrix.txt.gz")
library(GEOquery)
library(magrittr)
library(dplyr)
library(stringr)
?exprs()
?pData
pData
f_matrix <- "./GSE106172/matrix/GSE106172_series_matrix.txt.gz"
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
# exp_ori <- eSet@assayData$exprs
exp_ori0 <- Biobase::exprs(eSet)
pd <- GEOquery::pData(eSet)
pd <- Biobase::pData(eSet)
View(pd)
eSet@phenoData
eSet@phenoData@data
eSet@phenoData@data %>% dim()
exp_ori <- eSet@assayData$exprs
pd <- eSet@phenoData@data
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
exp_ori
read_matrix <- function(f_matrix){
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
exp_ori <- eSet@assayData$exprs
# exp_ori0 <- Biobase::exprs(eSet)
pd <- eSet@phenoData@data
# pd <- Biobase::pData(eSet)
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
return(list(exp = exp_ori, clinical_info = pd, eSet))
}
test <- read_matrix("./GSE106172/matrix/GSE106172_series_matrix.txt.gz")
read_matrix <- function(f_matrix){
eSet <- GEOquery::getGEO(filename = f_matrix,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
exp_ori <- eSet@assayData$exprs
# exp_ori0 <- Biobase::exprs(eSet)
pd <- eSet@phenoData@data
# pd <- Biobase::pData(eSet)
# sort expression according to clinical infor
if( ! identical(rownames(pd),colnames(exp_ori0)) ) {
exp_ori0 = exp_ori0[,match(rownames(pd),colnames(exp_ori0))]
}
exp_ori <- data.frame(probe_id= rownames(exp_ori0),exp_ori0)
stopifnot(identical(exp_ori$probe_id, exp_ori$probe_id))
return(list(exp = exp_ori, clinical_info = pd, eSet = eSet))
}
test <- read_matrix("./GSE106172/matrix/GSE106172_series_matrix.txt.gz")
test$eSet %>% class()
test$exp
test$exp %>% View()
test$clinical_info %>% View()
devtools::check()
document()
document()
document()
devtools::check()
devtools::check()
?use_data_raw()
use_data_raw("./examples/")
devtools::check()
devtools::check()
use_gpl3_license()
devtools::check()
f_soft <- "./inst/extdata/GSE106172/soft/GSE106172_family.soft.gz"
# 读入探针注释
gpl <- parseGEO(fname = f_soft, GSElimits = NULL,AnnotGPL = F,
getGPL = F)
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft, GSElimits = NULL,AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
gpl_ori
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
gpl_number
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
library(magrittr)
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
View(gpl_anno)
ids <- gpl_anno %>% dplyr::select("ID","symbol")
View(ids)
View(gpl_anno)
colnames(ids) <- c("probe_id","symbol")
# 保存Rdata #模仿AnnoProbe::idmap存储形式
assign(x = paste0(gpl_number,"_bioc"), ids)
save(list = paste0(gpl_number,"_bioc"), file = paste0("./",gpl_number,"_bioc.rda"))
usethis::use_package("dplyr")
usethis::use_package("stringr")
usethis::use_pipe(export = TRUE)
read_GPL <- function(f_soft, save_rda = NULL, rda_data = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
}
f_soft <- "./inst/extdata/GSE106172/soft/GSE106172_family.soft.gz"
read_GPL <- function(f_soft, save_rda = NULL, rda_data = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
}
test <- read_GPL(f_soft = f_soft)
f_soft <- "./inst/extdata/GSE106172/soft/GSE106172_family.soft.gz"
read_GPL <- function(f_soft, save_rda = NULL, rda_name = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
}
test <- read_GPL(f_soft = f_soft)
read_GPL <- function(f_soft, save_rda = NULL, rda_name = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
return(ids)
}
test <- read_GPL(f_soft = f_soft)
View(test)
read_GPL <- function(f_soft, save_rda = NULL, rda_name = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
# Save GPL probe data
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
return(list(ids = ids, gpl_ori = gpl_ori))
}
read_GPL <- function(f_soft, save_rda = NULL, rda_name = NULL){
# 读入探针注释
gpl <- GEOquery::parseGEO(fname = f_soft,
GSElimits = NULL,
AnnotGPL = F,
getGPL = F)
gpl_ori <- gpl@gpls[[1]]@dataTable@table # 获取平台注释表格
# gpl_ori <- gpl@gpls[[1]]@dataTable %>% GEOquery::Table()
# gpl_ori <- gpl@gpls$GPL16570@dataTable %>% GEOquery::Table()
gpl_number <- gpl@header$platform_id # 获取平台编号
if(F){
txt = data.table::fread(f_soft, sep = "")[[1]]
txt = txt[txt != ""]
# return(.parseGPLTxt(txt))
gpl_ori <- GEOquery:::.parseGPLTxt(txt) %>% GEOquery::Table()
}
# 进一步处理探针注释
gpl_anno <- gpl_ori %>%
dplyr::select(ID,gene_assignment) %>%
dplyr::filter(gene_assignment != "---") #%>%
# tidyr::separate(gene_assignment,c("drop","symbol"),sep="//") %>%
# dplyr::select(-drop)
gpl_anno["symbol"] <- stringr::str_extract(gpl_anno$gene_assignment ,pattern = "//.*?//") %>%
stringr::str_remove_all(pattern = "//| ")
ids <- gpl_anno %>% dplyr::select("ID","symbol")
colnames(ids) <- c("probe_id","symbol")
# Save GPL probe data
if(is.null(rda_name)){
rda_name <- paste0(gpl_number,"_bioc")
}
assign(x = rda_name, ids)
if(!is.null(save_rda)){
if(!dir.exists(save_rda)){
save_rda <- "./"
message(paste0("./",rda_name))
}
# 保存Rdata #模仿AnnoProbe::idmap存储形式
save(list = rda_name, file = paste0(save_rda,"/",rda_name,".rda"))
}
return(list(ids = ids, gpl_ori = gpl_ori, gpl_anno = gpl_anno))
}
test <- read_GPL(f_soft = f_soft)
View(test)
View(test[["gpl_ori"]])
?system.file()
system.file(package = "stats")
system.file("help", "AnIndex", package = "splines")
R.home()
system.file("GDS507.soft.gz")
system.file("GDS507.soft.gz",package = "GEOquery")
system.file("extdata","GDS507.soft.gz",package = "GEOquery")
library(devtools)
document()
?assign
?save
document()
document()
check()
?na.omit
?na.omit
?na.omit
check()
use_package("stats")
load_all()
system.file("inst","GSE106172_family.soft.gz",package = "readGEO")
system.file("extdata","GSE106172_family.soft.gz",package = "readGEO")
load_all()
system.file("extdata","GSE106172_family.soft.gz",package = "readGEO")
load_all()
devtools::install_local("./")
devtools::install_local("./")
system.file("extdata","GSE106172_family.soft.gz",package = "readGEO")
system.file("extdata/GSE106172/matrix","GSE106172_family.soft.gz",package = "readGEO")
system.file("extdata/GSE106172/soft","GSE106172_family.soft.gz",package = "readGEO")
system.file("extdata/GSE106172/matrix","GSE106172_series_matrix.txt.gz",package = "readGEO")
?read_matrix
??read_matrix
library(readGEO)
??read_matrix
??read_GEOmatrix
